// room script file

//Emitter emt;

function hGlowingOrb_Look(Hotspot *thisHotspot, CursorMode mode)
{
  player.Say("It is the second best glowing orb that I've seen today.");
}

ParticleDefinition* GetFireworksParticle()
{
  ParticleDefinition* fireworksParticle = new ParticleDefinition;
  fireworksParticle.life = 40;
  // make the velocities circular
  float r = 2000.0*Maths.Sqrt(IntToFloat(Random(8192))/8192.0);
  float theta =  2.0 * Maths.Pi*(IntToFloat(Random(8192))/8192.0);
  fireworksParticle.vx = FloatToInt(r * Maths.Cos(theta)); // Random outward velocity
  fireworksParticle.vy = FloatToInt(r * Maths.Sin(theta));
  
  fireworksParticle.gravity = 0; // No gravity
  fireworksParticle.initialTransparency = 0;
  fireworksParticle.finalTransparency = 100;
  fireworksParticle.initialWidth = 2;
  fireworksParticle.finalWidth = 20; // Expanding outward
  fireworksParticle.initialHeight = 2;
  fireworksParticle.finalHeight = 20;
  return fireworksParticle;
}

ParticleDefinition* GetSparkleParticle()
{
  ParticleDefinition* sparkleParticle = new ParticleDefinition;
  sparkleParticle.life = 50;
  sparkleParticle.vx = Random(3000) - 1000;
  sparkleParticle.vy = Random(3000) - 1000;
  sparkleParticle.initialTransparency = 0;
  sparkleParticle.finalTransparency = 100;
  sparkleParticle.initialWidth = 3;
  sparkleParticle.finalWidth = 8;
  sparkleParticle.initialHeight = 3;
  sparkleParticle.finalHeight = 8;
  sparkleParticle.gravity = 100;
  sparkleParticle.groundY = 154;
  sparkleParticle.groundHitBounces = true;
  return sparkleParticle;
}

ParticleDefinition* GetExplosionParticle()
{
  ParticleDefinition* explosionParticle = new ParticleDefinition;  
  explosionParticle.sprite = 1+ Random(60);
  explosionParticle.initialSprite = 1;
  explosionParticle.finalSprite = 61;  
  explosionParticle.life = 40;
  explosionParticle.vx = Random(3000) - 1500;
  explosionParticle.vy = Random(3000) - 1500;
  explosionParticle.gravity =  -90;
  explosionParticle.initialTransparency = 15;
  explosionParticle.finalTransparency = 100;
  explosionParticle.initialWidth = 12;
  explosionParticle.finalWidth = 50;
  explosionParticle.initialHeight = 12;
  explosionParticle.finalHeight = 50;
  return explosionParticle;
}

ParticleDefinition* GetSmokeParticle()
{
  ParticleDefinition* smokeParticle = new ParticleDefinition;
  smokeParticle.life = 40+Random(14);
  smokeParticle.vy = -1000-Random(1000);
  smokeParticle.initialTransparency = 0;
  smokeParticle.finalTransparency = 100;
  smokeParticle.initialWidth = 10+Random(2);
  smokeParticle.finalWidth = 20+Random(2);
  smokeParticle.initialHeight = 20+Random(2);
  smokeParticle.finalHeight = 10+Random(2);
  return smokeParticle;
}

ParticleDefinition* GetBubbleParticle()
{
  ParticleDefinition* bubbleParticle = new ParticleDefinition;
  bubbleParticle.life = 60;
  bubbleParticle.vx = Random(500) - 250; // Small horizontal drift
  bubbleParticle.vy = -1000 - Random(500); // Rising upwards
  bubbleParticle.gravity = -200; // Rising effect
  bubbleParticle.initialTransparency = 30;
  bubbleParticle.finalTransparency = 100;
  bubbleParticle.initialWidth = 5;
  bubbleParticle.finalWidth = 15; // Expands as it rises
  bubbleParticle.initialHeight = 5;
  bubbleParticle.finalHeight = 15;
  return bubbleParticle;
}

ParticleDefinition* GetRainParticle()
{
  ParticleDefinition* rainParticle = new ParticleDefinition;
  rainParticle.offsetX = Random(Screen.Width) - (Screen.Width/2);
  rainParticle.offsetY = -Random(30);
  rainParticle.life = 50;
  rainParticle.vx = Random(500) - 250; // Slight horizontal movement
  rainParticle.vy = 3000; // Falling down quickly
  rainParticle.gravity = 180; // Light gravity effect
  rainParticle.initialTransparency = 30;
  rainParticle.finalTransparency = 80;
  rainParticle.initialWidth = 2;
  rainParticle.finalWidth = 2;
  rainParticle.initialHeight = 10;
  rainParticle.finalHeight = 15; // Lengthening as it falls
  return rainParticle;
}

ParticleDefinition* GetFireParticle()
{
  ParticleDefinition* fireParticle = new ParticleDefinition;
  fireParticle.life = 35;
  fireParticle.vx = Random(1000) - 500; // Small horizontal variance
  fireParticle.vy = -1200 - Random(500); // Rising upward
  fireParticle.gravity = -50; // Slow upward pull
  fireParticle.initialTransparency = 50;
  fireParticle.finalTransparency = 100; // Disappears as it rises
  fireParticle.initialWidth = 10;
  fireParticle.finalWidth = 20; // Expands as it rises
  fireParticle.initialHeight = 10;
  fireParticle.finalHeight = 15;
  return fireParticle;
}

ParticleDefinition* GetSnowParticle()
{
  ParticleDefinition* snowParticle = new ParticleDefinition;
  snowParticle.offsetX = Random(Screen.Width) - (Screen.Width/2);
  snowParticle.offsetY = -Random(30);
  snowParticle.life = 160;
  snowParticle.vx = Random(300) - 150; // Slight horizontal drift
  snowParticle.vy = Random(300) + 220; // Slow downward movement
  snowParticle.gravity = 10; // Minimal gravity effect
  snowParticle.initialTransparency = 50;
  snowParticle.finalTransparency = 75;
  snowParticle.initialWidth = 4;
  snowParticle.finalWidth = 6; // Slight expansion as it falls
  snowParticle.initialHeight = 4;
  snowParticle.finalHeight = 6;
  return snowParticle;
}

ParticleDefinition* GetSplashParticle()
{
  ParticleDefinition* p = new ParticleDefinition;
  p.life = 96;  
  // squished circle
  float r = 2000.0*Maths.Sqrt(IntToFloat(Random(8192))/8192.0);
  float theta =  2.0 * Maths.Pi*(IntToFloat(Random(8192))/8192.0);
  p.vx = FloatToInt(r * Maths.Cos(theta))/3;
  p.vy = FloatToInt(r * Maths.Sin(theta))/2-2000; // vy shots upwards
  p.initialTransparency = 20;
  p.finalTransparency = 100;
  p.initialWidth = 2;
  p.finalWidth = 8;
  p.initialHeight = 8;
  p.finalHeight = 2;
  p.gravity = 100;
  p.groundY = 150 + Random(9);
  p.groundHitBounces = true;
  return p;
}

enum PresetParticleType {
  ePPT_Fireworks, 
  ePPT_Sparkle, 
  ePPT_Explosion, 
  ePPT_Smoke, 
  ePPT_Bubble, 
  ePPT_Rain, 
  ePPT_Fire, 
  ePPT_Snow, 
  ePPT_Splash
};

#define ePPT_Last ePPT_Splash

ParticleDefinition* [] GetParticleDefinitionsArrayByType(PresetParticleType type, int count)
{
  ParticleDefinition* definitions[] = new ParticleDefinition[count];
  int i;
  switch(type) {
    case ePPT_Fireworks:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetFireworksParticle();
      }
    break;
    case ePPT_Sparkle:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetSparkleParticle();
      }
    break;
    case ePPT_Explosion:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetExplosionParticle();
      }
    break;
    case ePPT_Smoke:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetSmokeParticle();
      }
    break;
    case ePPT_Bubble:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetBubbleParticle();
      }
    break;
    case ePPT_Rain:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetRainParticle();
      }
    break;
    case ePPT_Fire:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetFireParticle();
      }
    break;
    case ePPT_Snow:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetSnowParticle();
      }
    break;
    case ePPT_Splash:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetSplashParticle();
      }
    break;
  }  
  return definitions;
}

String GetTypeName(PresetParticleType type) {  
  switch(type) {
    case ePPT_Fireworks:
      return "Fireworks";
    case ePPT_Sparkle:
      return "Sparkle";
    case ePPT_Explosion:
      return "Explosion";
    case ePPT_Smoke:
      return "Smoke";
    case ePPT_Bubble:
      return "Bubble";
    case ePPT_Rain:
      return "Rain";
    case ePPT_Fire:
      return "Fire";
    case ePPT_Snow:
      return "Snow";
    case ePPT_Splash:
      return "Splash";
    default:
      return "Unknown";
  }  
}

void SetEmitterToType(PresetParticleType type)
{
  int definitions_count = 2048;
  ParticleDefinition* definitions[] = GetParticleDefinitionsArrayByType(type, definitions_count);
  GPE.SetParticleDefinitions(definitions, definitions_count);
  lbl_particle_selected.Text = GetTypeName(type);
  
  if(type == ePPT_Rain || type == ePPT_Snow) {
    GPE.SetPosition(Screen.Width/2, 0);
    GPE.StartEmitting();
  } else {
    GPE.StopEmitting();
  }
}

void ParticlePlayerCollision()
{  
  ViewFrame* c_vf = Game.GetViewFrame(player.NormalView, 0, 0);
  float scaling = IntToFloat(player.Scaling) / 100.00;
  int p_rect_width = FloatToInt(IntToFloat(Game.SpriteWidth[c_vf.Graphic]) * scaling);
  int p_rect_height = FloatToInt(IntToFloat(Game.SpriteHeight[c_vf.Graphic]) * scaling);
  int p_rect_x = player.x - p_rect_width/2;
  int p_rect_y = player.y - p_rect_height;
  
  //DrawingSurface* surf = Room.GetDrawingSurfaceForBackground();
  //surf.DrawingColor = Random(65535);
  //surf.DrawRectangle(p_rect_x, p_rect_y, p_rect_x + p_rect_width, p_rect_y + p_rect_height);
  //surf.Release();
  
  Particle* pcp [] = GPE.ParticlesHitRect(p_rect_x, p_rect_y, p_rect_width, p_rect_height);
  for(int i=0; pcp[i] != null; i++)
    pcp[i].life-=2;
}

int particle_type;
void on_call (int value)
{
  if(value == 1) {
    particle_type++;
    if(particle_type> ePPT_Last) {
      particle_type = 1;
    }
  }
  SetEmitterToType(particle_type);
}

function room_Load()
{  
  particle_type = ePPT_Splash;
  SetEmitterToType(particle_type);
}

void on_mouse_click(MouseButton button)
{
  if(particle_type == ePPT_Rain || particle_type == ePPT_Snow)
    return;
  GPE.SetPosition(mouse.x, mouse.y);
  GPE.Emit();
}

int mb_press;
function room_RepExec()
{
  ParticlePlayerCollision();
  
  if(particle_type == ePPT_Rain || particle_type == ePPT_Snow)
    return;
    
  if(mouse.IsButtonDown(eMouseLeft))
    mb_press++;
  else
    mb_press = 0;
  
  if(mb_press > 10) {
    GPE.SetPosition(mouse.x, mouse.y);
    GPE.StartEmitting(5);
  } else {
    GPE.StopEmitting();
  }
}

function room_AfterFadeIn()
{

}
