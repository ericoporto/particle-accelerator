// room script file

//Emitter emt;

function hGlowingOrb_Look(Hotspot *thisHotspot, CursorMode mode)
{
  player.Say("It is the second best glowing orb that I've seen today.");
}

ParticleDefinition* GetFireworksParticle()
{
  ParticleDefinition* fireworksParticle = new ParticleDefinition;
  fireworksParticle.life = 40;
  // make the velocities circular
  float r = 2000.0*Maths.Sqrt(IntToFloat(Random(8192))/8192.0);
  float theta =  2.0 * Maths.Pi*(IntToFloat(Random(8192))/8192.0);
  fireworksParticle.VelX = FloatToInt(r * Maths.Cos(theta)); // Random outward velocity
  fireworksParticle.VelY = FloatToInt(r * Maths.Sin(theta));
  
  fireworksParticle.Gravity = 0; // No gravity
  fireworksParticle.TransparencyBegin = 0;
  fireworksParticle.TransparencyEnd = 100;
  fireworksParticle.WidthBegin = 2;
  fireworksParticle.WidthEnd = 20; // Expanding outward
  fireworksParticle.HeightBegin = 2;
  fireworksParticle.HeightEnd = 20;
  return fireworksParticle;
}

ParticleDefinition* GetSparkleParticle()
{
  ParticleDefinition* sparkleParticle = new ParticleDefinition;
  sparkleParticle.life = 50;
  sparkleParticle.VelX = Random(3000) - 1000;
  sparkleParticle.VelY = Random(3000) - 1000;
  sparkleParticle.TransparencyBegin = 0;
  sparkleParticle.TransparencyEnd = 100;
  sparkleParticle.WidthBegin = 3;
  sparkleParticle.WidthEnd = 8;
  sparkleParticle.HeightBegin = 3;
  sparkleParticle.HeightEnd = 8;
  sparkleParticle.Gravity = 100;
  sparkleParticle.GroundY = 154;
  sparkleParticle.Bounces = true;
  return sparkleParticle;
}

ParticleDefinition* GetExplosionParticle()
{
  ParticleDefinition* explosionParticle = new ParticleDefinition;  
  explosionParticle.Sprite = 1+ Random(60);
  explosionParticle.SpriteBegin = 1;
  explosionParticle.SpriteEnd = 61;  
  explosionParticle.life = 40;
  explosionParticle.VelX = Random(3000) - 1500;
  explosionParticle.VelY = Random(3000) - 1500;
  explosionParticle.Gravity =  -90;
  explosionParticle.TransparencyBegin = 15;
  explosionParticle.TransparencyEnd = 100;
  explosionParticle.WidthBegin = 12;
  explosionParticle.WidthEnd = 50;
  explosionParticle.HeightBegin = 12;
  explosionParticle.HeightEnd = 50;
  return explosionParticle;
}

ParticleDefinition* GetSmokeParticle()
{
  ParticleDefinition* smokeParticle = new ParticleDefinition;
  smokeParticle.life = 40+Random(14);
  smokeParticle.VelY = -1000-Random(1000);
  smokeParticle.TransparencyBegin = 0;
  smokeParticle.TransparencyEnd = 100;
  smokeParticle.WidthBegin = 10+Random(2);
  smokeParticle.WidthEnd = 20+Random(2);
  smokeParticle.HeightBegin = 20+Random(2);
  smokeParticle.HeightEnd = 10+Random(2);
  return smokeParticle;
}

ParticleDefinition* GetBubbleParticle()
{
  ParticleDefinition* bubbleParticle = new ParticleDefinition;
  bubbleParticle.life = 60;
  bubbleParticle.VelX = Random(500) - 250; // Small horizontal drift
  bubbleParticle.VelY = -1000 - Random(500); // Rising upwards
  bubbleParticle.Gravity = -200; // Rising effect
  bubbleParticle.TransparencyBegin = 30;
  bubbleParticle.TransparencyEnd = 100;
  bubbleParticle.WidthBegin = 5;
  bubbleParticle.WidthEnd = 15; // Expands as it rises
  bubbleParticle.HeightBegin = 5;
  bubbleParticle.HeightEnd = 15;
  return bubbleParticle;
}

ParticleDefinition* GetRainParticle()
{
  ParticleDefinition* rainParticle = new ParticleDefinition;
  rainParticle.OffsetX = Random(Screen.Width) - (Screen.Width/2);
  rainParticle.OffsetY = -Random(30);
  rainParticle.life = 50;
  rainParticle.VelX = Random(500) - 250; // Slight horizontal movement
  rainParticle.VelY = 3000; // Falling down quickly
  rainParticle.Gravity = 180; // Light gravity effect
  rainParticle.TransparencyBegin = 30;
  rainParticle.TransparencyEnd = 80;
  rainParticle.WidthBegin = 2;
  rainParticle.WidthEnd = 2;
  rainParticle.HeightBegin = 10;
  rainParticle.HeightEnd = 15; // Lengthening as it falls
  return rainParticle;
}

ParticleDefinition* GetFireParticle()
{
  ParticleDefinition* fireParticle = new ParticleDefinition;
  fireParticle.life = 35;
  fireParticle.VelX = Random(1000) - 500; // Small horizontal variance
  fireParticle.VelY = -1200 - Random(500); // Rising upward
  fireParticle.Gravity = -50; // Slow upward pull
  fireParticle.TransparencyBegin = 50;
  fireParticle.TransparencyEnd = 100; // Disappears as it rises
  fireParticle.WidthBegin = 10;
  fireParticle.WidthEnd = 20; // Expands as it rises
  fireParticle.HeightBegin = 10;
  fireParticle.HeightEnd = 15;
  return fireParticle;
}

ParticleDefinition* GetSnowParticle()
{
  ParticleDefinition* snowParticle = new ParticleDefinition;
  snowParticle.OffsetX = Random(Screen.Width) - (Screen.Width/2);
  snowParticle.OffsetY = -Random(30);
  snowParticle.life = 160;
  snowParticle.VelX = Random(300) - 150; // Slight horizontal drift
  snowParticle.VelY = Random(300) + 220; // Slow downward movement
  snowParticle.Gravity = 10; // Minimal gravity effect
  snowParticle.TransparencyBegin = 50;
  snowParticle.TransparencyEnd = 75;
  snowParticle.WidthBegin = 4;
  snowParticle.WidthEnd = 6; // Slight expansion as it falls
  snowParticle.HeightBegin = 4;
  snowParticle.HeightEnd = 6;
  return snowParticle;
}

ParticleDefinition* GetSplashParticle()
{
  ParticleDefinition* p = new ParticleDefinition;
  p.life = 96;  
  // squished circle
  float r = 2000.0*Maths.Sqrt(IntToFloat(Random(8192))/8192.0);
  float theta =  2.0 * Maths.Pi*(IntToFloat(Random(8192))/8192.0);
  p.VelX = FloatToInt(r * Maths.Cos(theta))/3;
  p.VelY = FloatToInt(r * Maths.Sin(theta))/2-2000; // VelY shots upwards
  p.TransparencyBegin = 20;
  p.TransparencyEnd = 100;
  p.WidthBegin = 2;
  p.WidthEnd = 8;
  p.HeightBegin = 8;
  p.HeightEnd = 2;
  p.Gravity = 100;
  p.GroundY = 150 + Random(9);
  p.Bounces = true;
  return p;
}

enum PresetParticleType {
  ePPT_Fireworks, 
  ePPT_Sparkle, 
  ePPT_Explosion, 
  ePPT_Smoke, 
  ePPT_Bubble, 
  ePPT_Rain, 
  ePPT_Fire, 
  ePPT_Snow, 
  ePPT_Splash
};

#define ePPT_Last ePPT_Splash

ParticleDefinition* [] GetParticleDefinitionsArrayByType(PresetParticleType type, int count)
{
  ParticleDefinition* definitions[] = new ParticleDefinition[count];
  int i;
  switch(type) {
    case ePPT_Fireworks:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetFireworksParticle();
      }
    break;
    case ePPT_Sparkle:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetSparkleParticle();
      }
    break;
    case ePPT_Explosion:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetExplosionParticle();
      }
    break;
    case ePPT_Smoke:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetSmokeParticle();
      }
    break;
    case ePPT_Bubble:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetBubbleParticle();
      }
    break;
    case ePPT_Rain:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetRainParticle();
      }
    break;
    case ePPT_Fire:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetFireParticle();
      }
    break;
    case ePPT_Snow:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetSnowParticle();
      }
    break;
    case ePPT_Splash:
      for(i=0; i<count; i++)
      {
        definitions[i] = GetSplashParticle();
      }
    break;
  }  
  return definitions;
}

String GetTypeName(PresetParticleType type) {  
  switch(type) {
    case ePPT_Fireworks:
      return "Fireworks";
    case ePPT_Sparkle:
      return "Sparkle";
    case ePPT_Explosion:
      return "Explosion";
    case ePPT_Smoke:
      return "Smoke";
    case ePPT_Bubble:
      return "Bubble";
    case ePPT_Rain:
      return "Rain";
    case ePPT_Fire:
      return "Fire";
    case ePPT_Snow:
      return "Snow";
    case ePPT_Splash:
      return "Splash";
    default:
      return "Unknown";
  }  
}

void SetEmitterToType(PresetParticleType type)
{
  int definitions_count = 2048;
  ParticleDefinition* definitions[] = GetParticleDefinitionsArrayByType(type, definitions_count);
  GPE.SetParticleDefinitions(definitions, definitions_count);
  lbl_particle_selected.Text = GetTypeName(type);
  
  if(type == ePPT_Rain || type == ePPT_Snow) {
    GPE.SetPosition(Screen.Width/2, 0);
    GPE.StartEmitting();
  } else {
    GPE.StopEmitting();
  }
}

void ParticlePlayerCollision()
{  
  ViewFrame* c_vf = Game.GetViewFrame(player.NormalView, 0, 0);
  float scaling = IntToFloat(player.Scaling) / 100.00;
  int p_rect_width = FloatToInt(IntToFloat(Game.SpriteWidth[c_vf.Graphic]) * scaling);
  int p_rect_height = FloatToInt(IntToFloat(Game.SpriteHeight[c_vf.Graphic]) * scaling);
  int p_rect_x = player.x - p_rect_width/2;
  int p_rect_y = player.y - p_rect_height;
  
  //DrawingSurface* surf = Room.GetDrawingSurfaceForBackground();
  //surf.DrawingColor = Random(65535);
  //surf.DrawRectangle(p_rect_x, p_rect_y, p_rect_x + p_rect_width, p_rect_y + p_rect_height);
  //surf.Release();
  
  Particle* pcp [] = GPE.ParticlesHitRect(p_rect_x, p_rect_y, p_rect_width, p_rect_height);
  for(int i=0; pcp[i] != null; i++)
    pcp[i].life-=2;
}

int particle_type;
void on_call (int value)
{
  if(value == 1) {
    particle_type++;
    if(particle_type> ePPT_Last) {
      particle_type = 1;
    }
  }
  SetEmitterToType(particle_type);
}

function room_Load()
{  
  particle_type = ePPT_Splash;
  SetEmitterToType(particle_type);
}

void on_mouse_click(MouseButton button)
{
  if(particle_type == ePPT_Rain || particle_type == ePPT_Snow)
    return;
  GPE.SetPosition(mouse.x, mouse.y);
  GPE.Emit();
}

int mb_press;
function room_RepExec()
{
  ParticlePlayerCollision();
  
  if(particle_type == ePPT_Rain || particle_type == ePPT_Snow)
    return;
    
  if(mouse.IsButtonDown(eMouseLeft))
    mb_press++;
  else
    mb_press = 0;
  
  if(mb_press > 10) {
    GPE.SetPosition(mouse.x, mouse.y);
    GPE.StartEmitting(5);
  } else {
    GPE.StopEmitting();
  }
}

function room_AfterFadeIn()
{

}
