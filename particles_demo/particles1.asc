// Particles module script

#define LERP_SCALE 1024
#define INT_FRAC 1024

// ---------------------- Overlay pool ----------------------------
// Note: Overlays are cleared every time we exit a room

#define MAX_OVERLAYS 2048
Set* _emitters;
int _emittersUID;
Overlay * _overlayPool[MAX_OVERLAYS];
bool _overlayUsed[MAX_OVERLAYS];
int _overlayFreeStack[MAX_OVERLAYS];
int _overlayFreeTop = 0;

int _FreeOverlay (int index)
{
  if(index<0 || !_overlayUsed[index])
    return;

  if (_overlayPool[index] != null)
  {
    _overlayPool[index].Transparency = 100; // Avoid destroying overlays when possible
  }
  _overlayUsed[index] = false;

  // Push the freed overlay index back onto the free stack
  _overlayFreeStack[_overlayFreeTop] = index;
  _overlayFreeTop++;
  return -1;
}

int _GetFreeOverlaySlot ()
{
  if (_overlayFreeTop > 0)
  {
    // Pop the top index from the stack and mark the slot as used
    _overlayFreeTop--;
    int freeIndex = _overlayFreeStack[_overlayFreeTop];
    _overlayUsed[freeIndex] = true;
    return freeIndex;
  }
  return -1; // No available overlay
}

void _ClearOverlayPool ()
{
  for (int i = 0; i < MAX_OVERLAYS; i++)
  {
    if(_overlayPool[i] != null && _overlayPool[i].Valid)
    {
      _overlayPool[i].Remove (); // We actually remove it here due to room change
    }
    _overlayPool[i] = null;
    _overlayUsed[i] = false;
    _overlayFreeStack[i] = i;
  }
  _overlayFreeTop = MAX_OVERLAYS; // Set to max free slots
}

// track all emitters and tell when room changed for each
// this is necessary to reset overlay indexes

String _Emitter_GetUID ()
{
  int uid = _emittersUID;
  _emittersUID++;
  return String.Format ("%d", uid);
}

void _Emitter_ResetRoomChange (String uid)
{
  _emitters.Add(uid);
}

bool _Emitter_HasRoomChanged (String uid)
{
  return !_emitters.Contains(uid);
}

void _Emitter_MarkRoomChanged ()
{
  _emitters.Clear();
}

void _OnBeforeFadeIn ()
{
  _ClearOverlayPool ();
  _Emitter_MarkRoomChanged ();
}

void _OnAfterFadeOut ()
{
  _ClearOverlayPool ();
  _Emitter_MarkRoomChanged ();
}

// ---------------------- Particle methods ----------------------------

// we will use extenders in internal methods
void _SyncOverlay (this Particle*, Overlay* ovr)
{
  ovr.Transparency = this.Transparency;
  ovr.Graphic = this.Sprite;
#ifdef SCRIPT_API_v362
  ovr.SetPosition (this.X, this.Y, this.Width, this.Height);
#else
  ovr.X = this.X;
  ovr.Y = this.Y;
  ovr.Width = this.Width;
  ovr.Height = this.Height;
#endif
#ifdef SCRIPT_API_v400
  ovr.Rotation = this.Angle;
#endif
}

void _Init (this Particle*, ParticleDefinition *def, int x, int y, Overlay* ovr)
{
  this.MilliX = INT_FRAC * (x + def.OffsetX); // Offset based on emitter
  this.MilliY = INT_FRAC * (y + def.OffsetY); // Offset based on emitter
  this.X = this.MilliX / INT_FRAC;
  this.Y = this.MilliY / INT_FRAC;
  this._Life = def.LifeTotal;
  this.VelX = (def.VelX * INT_FRAC) / 1000;
  this.VelY = (def.VelY * INT_FRAC) / 1000;
  this.Gravity = (def.Gravity * INT_FRAC) / 1000;

  this.Transparency = def.TransparencyBegin;
  this.TransparencyBegin = def.TransparencyBegin;
  this.TransparencyDelta = def.TransparencyEnd - def.TransparencyBegin;

  this.Width = def.WidthBegin;
  this.WidthBegin = def.WidthBegin;
  this.WidthDelta = def.WidthEnd - def.WidthBegin;

  this.Height = def.HeightBegin;
  this.HeightBegin = def.HeightBegin;
  this.HeightDelta = def.HeightEnd - def.HeightBegin;

  this.SpriteCycleOffset = def.Sprite - def.SpriteBegin;
  this.Sprite = def.Sprite;
  this.SpriteBegin = def.SpriteBegin;
  this.SpriteDelta = def.SpriteEnd - def.SpriteBegin;

#ifdef SCRIPT_API_v400
  this.RotationSpeed = def.RotationSpeed;
  this.Angle = def.Angle;
#endif

  this.InitialLife = def.LifeTotal; // Store initial life for transitions
  this.Bounces = def.Bounces;
  this.GroundY = def.GroundY;
  if (this.GroundY <= 0)
  {
    this.GroundY = 16777216; // a big number so it is not reached
  }

#ifdef SCRIPT_API_v400
  ovr.BlendMode = def.BlendMode;
#endif
  this._SyncOverlay (ovr);
}

// Update the particle state and sync with overlay
void _Update (this Particle*)
{
  // alive check is done before calling this function
  this.MilliX += this.VelX;
  this.MilliY += this.VelY;
  this.VelY += this.Gravity; // Apply Gravity
  this.X = this.MilliX / INT_FRAC;
  this.Y = this.MilliY / INT_FRAC;

  // Calculate the scaling and Transparency transitions based on life
  int percent = LERP_SCALE - ((this._Life * LERP_SCALE) / this.InitialLife); // 0 to 1024
  this.Transparency = this.TransparencyBegin + ((this.TransparencyDelta) * percent) / LERP_SCALE;
  this.Width = this.WidthBegin + ((this.WidthDelta) * percent) / LERP_SCALE;
  this.Height = this.HeightBegin + ((this.HeightDelta) * percent) / LERP_SCALE;
  if (this.SpriteDelta > 0)
  {
    this.Sprite
        = this.SpriteBegin
          + (this.SpriteCycleOffset + ((this.SpriteDelta) * percent) / LERP_SCALE)
                % this.SpriteDelta;
  }

#ifdef SCRIPT_API_v400
  this.Angle += this.RotationSpeed;
  if (this.Angle >= 360.0)
    this.Angle -= 360.0;
  if (this.Angle < 0.0)
    this.Angle += 360.0;
#endif

  int oidx = this._OverlayIdx;
  if (oidx >= 0 && _overlayPool[oidx] != null)
  {
    Overlay *ovr = _overlayPool[oidx];
    ovr.Transparency = this.Transparency;
    ovr.Graphic = this.Sprite;
#ifdef SCRIPT_API_v362
    ovr.SetPosition (this.X, this.Y, this.Width, this.Height);
#else
    ovr.X = this.X;
    ovr.Y = this.Y;
    ovr.Width = this.Width;
    ovr.Height = this.Height;
#endif
#ifdef SCRIPT_API_v400
    ovr.Rotation = this.Angle;
#endif
  }

  this._Life--;

  if (this.Y >= this.GroundY)
  {
    if (this.Bounces)
    {
      this.VelY = -(this.VelY * 700) / INT_FRAC; // Invert velocity and simulate energy loss
    }
    else
    {
      this._Life = 0; // Mark particle as dead (cheaper than other things...)
    }
  }
}

int get_Life (this Particle*)
{
  return this._Life;
}

void set_Life (this Particle*, int value)
{
  this._Life = value;
}

bool Particle::IsAlive ()
{
  return (this._Life > 0);
}

bool Particle::HitsPoint (int x, int y)
{
  return (x >= this.X) && (y >= this.Y)
         && (x <= this.X + this.Width) && (y <= this.Y + this.Height);
}

bool Particle::HitsRect (int x, int y, int width, int height)
{
  return (x + width >= this.X) && (y + height >= this.Y)
         && (x <= this.X + this.Width) && (y <= this.Y + this.Height);
}

// ---------------------- Emitter methods ----------------------------

void Emitter::SetPosition (int x, int y)
{
  this.X = x;
  this.Y = y;
}

void Emitter::SetParticleDefinitions (ParticleDefinition *defs[], int defCount)
{
  for (int i = 0; i < defCount; i++)
  {
    ParticleDefinition *def = defs[i];
    if (def.SpriteBegin == 0 && def.SpriteEnd == 0)
    {
      def.SpriteBegin = def.Sprite;
      def.SpriteEnd = def.Sprite;
    }
  }

  this.definitions = defs;
  this.definitionsCount = defCount;
}

// Initialize the emitter with position, particle definitions, and other parameters
void Emitter::Init (int x, int y, ParticleDefinition *defs[], int defCount, int emitAmount, int maxParticles)
{
  if (String.IsNullOrEmpty (this.uID))
    this.uID = _Emitter_GetUID ();
  this.SetPosition (x, y);
  this.SetParticleDefinitions (defs, defCount);
  this.EmitAmount = emitAmount;
  if(this.maxParticles != maxParticles)
  {
    for (int i = 0; i < this.maxParticles; i++)
    {
      Particle* p = this.particles[i];
      if (p != null && p._OverlayIdx >= 0)
      {
        _FreeOverlay(p._OverlayIdx);
      }
    }
    this.maxParticles = maxParticles;
    this.particles = new Particle[maxParticles];
    for (int i = 0; i < this.maxParticles; i++)
    {
      this.particles[i] = new Particle;
      this.particles[i]._OverlayIdx = -1;
    }
  }
}

protected ParticleDefinition* Emitter::_GetRandomDefinition ()
{
  int defIndex = Random (this.definitionsCount - 1); // validated earlier
  return this.definitions[defIndex];
}

// Returns TRUE if it emitted the particle SUCCESSFULLY
protected bool Emitter::_EmitParticleIndex (int i)
{
  Particle *p = this.particles[i];
  if (p.IsAlive ())
    return false;

  // Reuse dead particle if it's not alive anymore
  if(p._OverlayIdx >= 0) {
    p._OverlayIdx = _FreeOverlay (p._OverlayIdx);
  }

  this.lastEmittedParticle = i; // remember to speed up loop for looking new particles
  int overlayIndex = _GetFreeOverlaySlot ();
  if (overlayIndex >= 0)
  {
    ParticleDefinition *def = this._GetRandomDefinition ();

    if (_overlayPool[overlayIndex] == null)
    {
      // TODO: handle this elsewhere, add option for room overlay
      Overlay *ovr = Overlay.CreateGraphical (this.X, this.Y, def.Sprite);
      _overlayPool[overlayIndex] = ovr;
    }
    p._Init (def, this.X, this.Y, _overlayPool[overlayIndex]);
    p._OverlayIdx = overlayIndex;
    return true;
  }
  return false;
}

// Emit a single particle from the emitter, returns TRUE for FAILURE
protected bool Emitter::_EmitSingleParticle ()
{
  int i = (this.lastEmittedParticle + 1) % this.maxParticles;

  if (this._EmitParticleIndex (i)) // If it fails to emit, try to find a dead particle to reuse
    return false;

  int loop_at = i;
  for (; i < this.maxParticles; i++)
  {
    if (!this.particles[i].IsAlive ())
    {
      return !this._EmitParticleIndex (i);
    }
  }

  for (i = 0; i < loop_at; i++)
  {
    if (!this.particles[i].IsAlive ())
    {
      return !this._EmitParticleIndex (i);
    }
  }

  return true; // indicates something is wrong
}

// Clean particles if a ChangeRoom call happend (room has changed)
protected bool Emitter::_HandleRoomChanged ()
{
  for (int i = 0; i < this.maxParticles; i++)
  {
    Particle* p = this.particles[i];
    p._Life = 0;
    p._OverlayIdx = _FreeOverlay (p._OverlayIdx);
  }
  _Emitter_ResetRoomChange (this.uID);
}

// Emit particles from the emitter, returns true on success
bool Emitter::Emit ()
{
  if(this.definitionsCount <= 0)
    return false; // nothing to emit

  for (int i = 0; i < this.EmitAmount; i++)
  {
    // if we either don't have more overlays or particles, return failure
    if (this._EmitSingleParticle ())
      return false;
  }
  return true;
}

// Update emitter particles
void Emitter::Update ()
{
  if (_Emitter_HasRoomChanged (this.uID))
    this._HandleRoomChanged ();

  for (int i = 0; i < this.maxParticles; i++)
  {
    if (this.particles[i]._Life > 0)
    {
      this.particles[i]._Update ();
    }
    else if (this.particles[i]._OverlayIdx >= 0)
    {
      this.particles[i]._OverlayIdx = _FreeOverlay (this.particles[i]._OverlayIdx);
    }
  }
}

Particle *[] Emitter::ParticlesHitPoint (int x, int y)
{
  int c[] = new int[this.maxParticles];
  int c_count;
  for (int i = 0; i < this.maxParticles; i++)
  {
    Particle *p = this.particles[i];
    if (p.IsAlive () && p.HitsPoint (x, y))
    {
      c[c_count] = i;
      c_count++;
    }
  }
  Particle *ps[] = new Particle[c_count + 1];
  for (int i = 0; i < c_count; i++)
  {
    ps[i] = this.particles[c[i]];
  }
  return ps;
}

Particle *[] Emitter::ParticlesHitRect (int x, int y, int width, int height)
{
  int c[] = new int[this.maxParticles];
  int c_count = 0;
  for (int i = 0; i < this.maxParticles; i++)
  {
    Particle *p = this.particles[i];
    if (p.IsAlive () && p.HitsRect (x, y, width, height))
    {
      c[c_count] = i;
      c_count++;
    }
  }
  Particle *ps[] = new Particle[c_count + 1];
  for (int i = 0; i < c_count; i++)
  {
    ps[i] = this.particles[c[i]];
  }
  return ps;
}

void ContinuousEmitter::StartEmitting (int emitInterval)
{
  if (emitInterval < 4)
    emitInterval = 4;
  this.emitInterval = emitInterval;
  this.isEmitting = true;
}

void ContinuousEmitter::StopEmitting ()
{
  this.isEmitting = false;
}

void ContinuousEmitter::UpdateContinuous ()
{
  this.Update ();

  if (!this.isEmitting) return;

  this._emitCooldown--;
  if (this._emitCooldown <= 0)
  {
    bool success = this.Emit ();

    // TODO: implement some sort of cooldown, but not as a surprise
    // maybe add a config?

    this._emitCooldown = this.emitInterval;
  }
}

// --- Global Particle Emitter for easy quick particle emission

ContinuousEmitter GPE;
export GPE;

void game_start ()
{
  _emitters = Set.Create (eSorted, eCaseSensitive);
  ParticleDefinition *d[];
  int max_particles =  MAX_OVERLAYS; // (MAX_OVERLAYS * 4) / 5;
  int emit_count = max_particles / 16;
  GPE.Init (Screen.Width / 2, Screen.Height / 2, d, 0, emit_count,  max_particles);
}

void repeatedly_execute_always ()
{
  GPE.UpdateContinuous ();
}

void on_event (EventType event, int data)
{
  switch(event) {
    case eEventEnterRoomBeforeFadein:
      _OnBeforeFadeIn ();
    break;
    case eEventLeaveRoomAfterFadeout:
      _OnAfterFadeOut ();
    break;
  }
}